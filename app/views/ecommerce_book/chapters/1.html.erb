  <% content_for :head do %>
  <title>Architecting_e-commerce.docx</title><style type="text/css">ol{margin:0;padding:0}p{margin:0}.c15{vertical-align:bottom;width:324.0pt;border-style:solid;border-color:#000000;border-width:0.0pt}.c23{vertical-align:top;width:324.0pt;border-style:solid;border-color:#000000;border-width:0.0pt}.c11{vertical-align:top;width:239.4pt;border-style:solid;border-color:#000000;border-width:1.0pt}.c24{vertical-align:top;width:293.7pt;border-style:solid;border-color:#000000;border-width:0.0pt}.c19{padding-top:24.0pt;text-align:justify;padding-bottom:3.0pt}.c32{width:468.0pt;background-color:#ffffff;padding:72.0pt 72.0pt 108.0pt 72.0pt}.c22{color:#595959;font-size:10pt;font-family:Times New Roman}.c0{color:#4b5a60;font-size:12pt;font-family:Times New Roman}.c1{padding-left:0pt;direction:ltr;margin-left:36.0pt}.c26{padding-top:24.0pt;text-align:center}.c2{font-size:12pt;font-family:Times New Roman}.c13{line-height:1.0999999999999999;padding-top:12.0pt}.c28{text-indent:28.8pt;margin-left:28.8pt}.c12{color:#524a82;text-decoration:underline}.c8{font-style:italic;font-family:Times New Roman}.c21{font-size:24pt;font-family:Times New Roman}.c10{text-indent:12.0pt;margin-left:12.0pt}.c4{margin:0;padding:0}.c18{color:inherit;text-decoration:inherit}.c31{color:#548dd4;font-weight:bold}.c20{font-size:14pt;font-family:Times New Roman}.c6{color:#983620}.c17{text-align:right}.c29{font-size:36pt}.c9{height:12pt}.c7{margin-left:36.0pt}.c16{height:0pt}.c14{text-indent:36.0pt}.c33{vertical-align:super}.c30{list-style-type:disc}.c27{border-collapse:collapse}.c25{font-family:Times New Roman}.c5{padding-top:6.0pt}.c34{background-color:#983620}.c3{direction:ltr}body{color:#000000;font-size:12pt;font-family:Times New Roman}h1{padding-top:36.0pt;line-height:1.0;text-align:center;color:#983620;font-size:24pt;font-family:Times New Roman;padding-bottom:6.0pt}h2{padding-top:6.0pt;line-height:1.0;text-align:center;color:#000000;font-size:14pt;font-family:Times New Roman;padding-bottom:0pt}h3{padding-top:14.0pt;line-height:1.0;text-align:left;color:#983620;font-size:12pt;font-family:Times New Roman;padding-bottom:0pt}h4{padding-top:10.0pt;line-height:1.0;text-align:left;color:#4b5a60;font-size:12pt;font-family:Times New Roman;padding-bottom:0pt}h5{padding-top:12.0pt;line-height:1.0;text-align:left;color:#000000;font-style:italic;font-size:13pt;font-family:Times New Roman;font-weight:bold;padding-bottom:3.0pt}h6{padding-top:10.0pt;line-height:1.0;text-align:left;color:#252c2f;font-style:italic;font-size:12pt;font-family:Times New Roman;padding-bottom:0pt}</style>
  <% end %>

<body class="c32"><div><p class="c9 c3"><span class="c22"></span></p></div><p><span></span></p><table cellpadding="0" cellspacing="0" class="c27"><tbody><tr class="c16"><td class="c23"><p><span></span></p><table cellpadding="0" cellspacing="0" class="c27"><tbody><tr class="c16"><td class="c24 c34"><a href="#" name="id.7de5e284d536"></a><p class="c9 c3"><span></span></p></td></tr><tr class="c16"><td class="c24"><p class="c9 c3"><span></span></p></td></tr><tr class="c16"><td class="c24"><p class="c3"><%= image_tag 'image00.png', :height => 342%></p></td></tr><tr class="c16"><td class="c24"><p class="c9 c3"><span></span></p></td></tr></tbody></table><p class="c9 c3"><span></span></p></td></tr><tr class="c16"><td class="c15"><p class="c3 c19"><span class="c6 c25 c29">Architecting<br>E-commerce</span></p><p class="c3"><span class="c20">Starting a Project</span></p></td></tr><tr class="c16"><td class="c23"><p class="c3 c13"><span class="c22">David Henner</span></p><p class="c13 c9 c3"><span class="c22"><br></span></p></td></tr></tbody></table><p class="c3 c9"><span class="c22"></span></p><hr style="page-break-before:always;display:none;"><p class="c26 c3"><span class="c21 c6">Table of Contents</span></p><hr><p class="c5 c3"><span class="c2 c31">Architecting E-commerce&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1</span></p><p class="c3"><span class="c25">Starting a Project&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1</span></p><p class="c10 c3"><span class="c8">Breaking it down&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2</span></p><p class="c10 c3"><span class="c8">Choosing a Starting Point&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4</span></p><p class="c10 c3"><span class="c8">Choosing a Web Framework&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4</span></p><p class="c3 c5"><span class="c2 c31">Defining the User&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5</span></p><p class="c3"><span class="c25">List out a set of tasks&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5</span></p><p class="c3 c10"><span class="c8">Create a UML diagram:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;6</span></p><p class="c9 c3"><span class="c8"></span></p><p class="c9 c3"><span class="c8"></span></p><p class="c9 c3"><span class="c8"></span></p><hr style="page-break-before:always;display:none;"><a href="#" name="id.08d99d082294"></a><h1 class="c4 c3"><span class="c21 c6">Architecting<br>E-commerce</span></h1><a href="#" name="id.9c62355353e1"></a><h2 class="c4 c3"><span class="c20">Starting a Project </span>
</h2><hr><p class="c3"><span class="c2">The hardest part of starting any project is determining what to do first. &nbsp;To help determine this, you first need to write out a high-level to-do list. &nbsp;When you think of an ecommerce site the first thing that comes to mind is a cart and the checkout process. &nbsp;If ecommerce were that simple there wouldn&rsquo;t be much need for a book.</span></p><p class="c9 c3"><span class="c2"></span></p><p class="c3"><span class="c2">Ecommerce entails:</span></p><ol class="c4 c30" start="1"><li class="c1"><span class="c2">Purchase Orders</span></li><li class="c1"><span class="c2">Products (and their variants)</span></li><li class="c1"><span class="c2">Users</span></li><li class="c1"><span class="c2">Inventory Tracking</span></li><li class="c1"><span class="c2">Accounting</span></li><li class="c1"><span class="c2">Taxes</span></li><li class="c1"><span class="c2">Coupons</span></li><li class="c1"><span class="c2">Affiliates Programs</span></li><li class="c1"><span class="c2">Shipping </span></li><li class="c1"><span class="c2">Returning Items</span></li><li class="c1"><span class="c2">Orders (and Admin Orders)</span></li><li class="c1"><span class="c2">Invoices</span></li><li class="c1"><span class="c2">Emailing Advertising</span></li></ol><p class="c3"><span class="c2">This list could go on but this covers most of the major components. &nbsp;If your site sells digital content you might not need a purchase order system but having that component might be a wise long-term choice. &nbsp;It would give you the ability to add physical products and continue selling digital content. &nbsp;The major difference between digital content is you have an unlimited supply of digital content and you would need a way users can download digital content. &nbsp;The digital content would just need a quantity of a billion and you shouldn&rsquo;t need to worry about selling out. &nbsp;Allowing products to have many downloadable goods should solve the download issues.</span></p><a href="#" name="id.1e946b81a186"></a><h3 class="c4 c3"><span class="c2 c6">Breaking it down</span></h3><h4 class="c4 c3"><span class="c0">Purchase Orders: &nbsp;</span></h4><p class="c7 c14 c3"><span class="c2">Purchase Orders (PO&rsquo;s) are orders the owner of a commerce site makes to restock inventory. &nbsp;A complex solution would entail accounting, inventory, returning defective material and low stock alerts to your merchandising team.</span></p><h4 class="c4 c3"><span class="c0">Products (Variants):</span></h4><p class="c7 c14 c3"><span class="c2">Products are defined as items or a group of items that are sold under the same name. &nbsp;For example, a specific type of Nike shoes (Air Jordan&rsquo;s) would be a product. &nbsp;This shoe would have many sizes. &nbsp;These different sizes are the variants of the product.</span></p><h4 class="c4 c3"><span class="c0">Users:</span></h4><p class="c7 c14 c3"><span class="c2">Users can be thought of as customers and administrators. &nbsp;Admin users would be allowed to setup all aspects of the ecommerce site. &nbsp;Without customers it&rsquo;s not really an ecommerce site.</span></p><h4 class="c4 c3"><span class="c0">Inventory Tracking:</span></h4><p class="c7 c14 c3"><span class="c2">Inventory tracking tracks the number of items a commerce site has for sale. &nbsp;Additionally, inventory tracking entails determining how many items are; waiting to be shipped, pending to be returned and on order from supplier. &nbsp;This information gives a company a clear understanding of what needs to be ordered and what should be discontinued. &nbsp;</span></p><h4 class="c4 c3"><span class="c0">Accounting:</span></h4><p class="c7 c14 c3"><span class="c2">Accounting can be as simple or complex as needed in an ecommerce site. &nbsp;For mom-n-pop shops you might be happy with just tracking the amount of cash you have received through your credit card transactions. &nbsp;This isn&rsquo;t a perfect system for accounting but will work if your shop is small. &nbsp;The preferred method of accounting is a double entry accounting system. &nbsp;This allows full visibility of your assets and is completely traceable. &nbsp;In addition double entry accounting has the benefit of being viewed in a simple format or as complex as needed.</span></p><h4 class="c4 c3"><span class="c0">Taxes:</span></h4><p class="c3 c28"><span class="c2">Taxes are progressively getting more complex for ecommerce. &nbsp;If New York City has its way you will need to worry about state and separate city taxes in the future. &nbsp;Also internationally taxes are pre-applied to a product while in the United States the taxes are applied during the checkout process. &nbsp;</span></p><h4 class="c4 c3"><span class="c0">Coupons:</span></h4><p class="c7 c14 c3"><span class="c2">Coupons need to be versatile in ecommerce. &nbsp;Coupons have many different varieties. &nbsp;Some types include percent off and item, percent off in order, flat dollar figure off and order with a minimum purchase amount, buy two get one free&hellip; &nbsp;The list can be endless. &nbsp; The main focus is to create a coupon system that is flexible but not overly complex. &nbsp;</span></p><h4 class="c4 c3"><span class="c0">Affiliates Programs:</span></h4><p class="c7 c3 c14"><span class="c2">Affiliate Programs help bring traffic to your site. &nbsp;Google Ad-Words might be the most well know place to pay for Internet traffic but there are hundreds of marketing companies that want to send you traffic. &nbsp;Some you will pay per click others you will pay for a purchase. &nbsp;Hence an ecommerce site needs to take who sent you traffic. &nbsp;Thus you will know your return on investment (ROI).</span></p><h4 class="c4 c3"><span class="c0">Shipping:</span></h4><p class="c7 c14 c3"><span class="c2">Shipping items triggers several events in an ecommerce. &nbsp;Most importantly this is where you know the item that was purchased is actually in stock. &nbsp;This should be the step that captures credit-card money from your payment gateway (An example of a payment gateway is authorize.net or Braintree). &nbsp;Before this step the credit card is authorized for payment but not actually charged.</span></p><h4 class="c4 c3"><span class="c0">Returning Items:</span></h4><p class="c7 c14 c3"><span class="c2">Returning Items can be the most complex piece of business logic in an ecommerce site. &nbsp;You need to know what coupons were applied, how much was paid on the item and you need to differentiate the same items with a quantity larger than one. &nbsp;It is very important to break the items that were ordered in a simple form, otherwise automating this logic could be impossible.</span></p><h4 class="c4 c3"><span class="c0">Orders:</span></h4><p class="c7 c14 c3"><span class="c2">An Order starts at the time of purchase. &nbsp;Do not confuse an order with your shopping cart. &nbsp;An order is more like the history of a purchase. &nbsp;Keeping an order separate from your cart simplifies validations, separates domain logic and keeps your domain logic simple. &nbsp;An order&rsquo;s purpose is to store the order_items, shipments, invoices, coupon(s) and the user that made the order.</span></p><h4 class="c4 c3"><span class="c0">Invoices:</span></h4><p class="c7 c14 c3"><span class="c2">An invoice is the bill or receipt of a purchase. &nbsp;Advanced ecommerce sites allows for multiple invoices for the same purchase. &nbsp;Ideally, an invoice is unique for every shipment.</span></p><h4 class="c3 c4"><span class="c0">Email Advertising:</span></h4><p class="c7 c14 c3"><span class="c2">Email advertising turns out to have the largest ROI than any other form of advertising. &nbsp;If you have an ecommerce site and don&rsquo;t send email advertising, you are missing a huge opportunity. </span></p><a href="#" name="id.5798896bf0d8"></a><h3 class="c4 c3"><span class="c2 c6">Choosing a Starting Point</span></h3><p class="c3"><span class="c2">When you try to determine a starting point you should break down what everything depends on. &nbsp;Many people would pull out a build your shopping cart book and follow that flow. &nbsp;A shopping cart is great, but at the end of the day the shopping cart needs Purchase Orders, Products, Users and Inventory Tracking setup before any item can be placed in the cart.</span></p><p class="c3"><span class="c2">This naturally leads us to products and users. &nbsp;Both are great choices from a database perspective. &nbsp;The DB of the products and users are generally separated from each other. &nbsp;However, creating a product from the application will require an admin-user. &nbsp;Thus, because products require users in the application, it is best to start the application creating users. &nbsp;Also users involve less business knowledge, so a developer can generally run with that requirement while the business analyst tries to determine the domain specific information about the products.</span></p><p class="c3"><span class="c2">At this point don&rsquo;t think about what else you need to know about the ecommerce site. &nbsp;Good agile/lean practices tell you to only schedule a couple weeks in the future. &nbsp;Trying to guess what might come up in the future will only slow down what your task is now. &nbsp;Right now start gathering a list of initial requirements about creating a user.</span></p><a href="#" name="id.4e0e8eca5f8c"></a><h3 class="c4 c3"><span class="c2 c6">Choosing a Web Framework</span></h3><p class="c3"><span class="c2">A web framework is needed to help build a web application. &nbsp;The intent of this book is not to argue what framework is the best. &nbsp;Given the readability of the Ruby programing language this book will have all it&rsquo;s examples using Ruby on Rails. &nbsp;If you don&rsquo;t know ruby or rails you might want to go to http://www.rubyonrails.org and look at the tutorials.</span></p><a href="#" name="id.7de0509c8851"></a><h1 class="c4 c3"><span class="c6 c21">Defining the User</span></h1><a href="#" name="id.54e95a3e7238"></a><h2 class="c4 c3"><span class="c20">List out a set of tasks</span></h2><hr><p class="c3"><span class="c2">Now that we know we want to create users we need to create a game plan of the features about these users. &nbsp;Generally most starter applications will do just fine for users. &nbsp;At this point creating a few user stories will be useful to understand the direction to take.</span></p><ol class="c4 c30" start="1"><li class="c1"><span class="c2">A user should be able to create an account</span></li><li class="c1"><span class="c2">A user should be able to login with their email address and password</span></li><li class="c1"><span class="c2">A user&rsquo;s password should be encrypted</span></li><li class="c1"><span class="c2">A user should be able to login</span></li><li class="c1"><span class="c2">A user should be able to logout</span></li><li class="c1"><span class="c2">A user should be able to be assigned roles (admin and more to come)</span></li></ol><p class="c3"><span class="c2">These stories should be enough to work out basic authentication and authorization. &nbsp;Authentication is the ability to login/logout. &nbsp;Authorization is the ability to access specific sections of the web site (ex. All users should not be able to access the admin section of the site).</span></p><p class="c3"><span class="c2">At this point it&rsquo;s time to start righting basic code that can be used throughout the rest of the application. &nbsp;As with most frameworks, Rails provides plugins (or gems) to help with common task like authorization. &nbsp;For this section of the application cancan (https://github.com/ryanb/cancan) will be used for authorizations. &nbsp;For authentication the authlogic gem (https://github.com/binarylogic/authlogic) will be used. &nbsp;</span></p><p class="c3"><span class="c2">It can be argued using a 3</span><span class="c2 c33">rd</span><span class="c2">&nbsp;party source for something so important can be risky if the resource is no longer supported. &nbsp;In fact for several months the authlogic gem itself was abandoned. &nbsp;The good news as of the time of this writing it has been updated. On the other hand the chance that you make a mistake creating the same code is larger because you won&rsquo;t have thousands of people looking at your code. &nbsp;</span></p><p class="c3"><span class="c2">To avoid thousands of line of code in this book, there will be a minimal amount of code for view logic. &nbsp;Most of the coding examples will be for business logic. &nbsp;Most of this book will follow the open source project ror_ecommerce. &nbsp;(</span><span class="c2 c12"><a class="c18" href="https://github.com/drhenner/ror_ecommerce">https://github.com/drhenner/ror_ecommerce</a></span><span class="c2">) &nbsp;Please refer to ror_ecommerce for detailed view and controller logic.</span></p><a href="#" name="id.101d11f09a32"></a><h3 class="c4 c3"><span class="c2 c6">Create a UML diagram:</span></h3><p class="c3"><span class="c2">I like drawing out a basic diagram of the users table and the tables that are directly associated with the user. </span></p><p class="c9 c3"><span class="c2"></span></p><p class="c9 c3"><span class="c2"></span></p><p class="c9 c3"><span class="c2"></span></p><hr style="page-break-before:always;display:none;"><p class="c3 c26"><span class="c21 c6">Credits</span></p><hr><p class="c3 c7"><span class="c2">Authlogic: Created by Ben Johnson, </span><span class="c2 c12"><a class="c18" href="https://github.com/binarylogic/authlogic">https://github.com/binarylogic/authlogic</a></span></p><p class="c3"><span class="c2">CanCan: Created by Ryan Bates, </span><span class="c2 c12"><a class="c18" href="https://github.com/ryanb/cancan">https://github.com/ryanb/cancan</a></span></p><p class="c3"><span class="c2">ror_ecommerce: Created by David Henner, </span><span class="c2 c12"><a class="c18" href="https://github.com/drhenner/ror_ecommerce">https://github.com/drhenner/ror_ecommerce</a></span></p><p class="c9 c3"><span class="c2 c12"><a class="c18" href="https://github.com/drhenner/ror_ecommerce"></a></span></p><p class="c9 c3"><span class="c2 c12"><a class="c18" href="https://github.com/drhenner/ror_ecommerce"></a></span></p>

</body>